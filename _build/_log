### Starting build.
# Target: camltypes.mli.depends, tags: { package(ounit2), extension:mli, file:camltypes.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules camltypes.mli > camltypes.mli.depends # cached
# Target: camltypes.cmi, tags: { package(ounit2), byte, compile, extension:mli, file:camltypes.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o camltypes.cmi camltypes.mli # cached
# Target: camltypes.ml.depends, tags: { package(ounit2), extension:ml, file:camltypes.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules camltypes.ml > camltypes.ml.depends # cached
# Target: camltypes.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:camltypes.cmo, file:camltypes.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o camltypes.cmo camltypes.ml # cached
# Target: camltypes.byte, tags: { package(ounit2), byte, dont_link_with, extension:byte, file:camltypes.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package ounit2 camltypes.cmo -o camltypes.byte # cached
# Target: opening.ml.depends, tags: { package(ounit2), extension:ml, file:opening.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules opening.ml > opening.ml.depends
# Target: initstate.ml.depends, tags: { package(ounit2), extension:ml, file:initstate.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules initstate.ml > initstate.ml.depends # cached
# Target: initstate.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:initstate.cmo, file:initstate.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o initstate.cmo initstate.ml # cached
# Target: opening.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:opening.cmo, file:opening.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o opening.cmo opening.ml
# Target: opening.byte, tags: { package(ounit2), byte, dont_link_with, extension:byte, file:opening.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package ounit2 camltypes.cmo initstate.cmo opening.cmo -o opening.byte
# Target: test.ml.depends, tags: { package(ounit2), extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules test.ml > test.ml.depends
# Target: attack.mli.depends, tags: { package(ounit2), extension:mli, file:attack.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules attack.mli > attack.mli.depends # cached
# Target: attack.cmi, tags: { package(ounit2), byte, compile, extension:mli, file:attack.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o attack.cmi attack.mli # cached
# Target: test.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o test.cmo test.ml
# Target: attack.ml.depends, tags: { package(ounit2), extension:ml, file:attack.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules attack.ml > attack.ml.depends # cached
# Target: attack.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:attack.cmo, file:attack.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o attack.cmo attack.ml # cached
# Target: test.byte, tags: { package(ounit2), byte, dont_link_with, extension:byte, file:test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package ounit2 attack.cmo camltypes.cmo test.cmo -o test.byte
# Target: ai.mli.depends, tags: { package(ounit2), extension:mli, file:ai.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules ai.mli > ai.mli.depends # cached
# Target: ai.cmi, tags: { package(ounit2), byte, compile, extension:mli, file:ai.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o ai.cmi ai.mli # cached
# Target: ai.ml.depends, tags: { package(ounit2), extension:ml, file:ai.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules ai.ml > ai.ml.depends # cached
# Target: ai.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:ai.cmo, file:ai.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o ai.cmo ai.ml # cached
# Target: ai.byte, tags: { package(ounit2), byte, dont_link_with, extension:byte, file:ai.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package ounit2 ai.cmo -o ai.byte # cached
# Target: attack.byte, tags: { package(ounit2), byte, dont_link_with, extension:byte, file:attack.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package ounit2 attack.cmo -o attack.byte # cached
# Target: stages.ml.depends, tags: { package(ounit2), extension:ml, file:stages.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules stages.ml > stages.ml.depends # cached
# Target: stages.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:stages.cmo, file:stages.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o stages.cmo stages.ml # cached
# Target: stages.byte, tags: { package(ounit2), byte, dont_link_with, extension:byte, file:stages.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package ounit2 stages.cmo -o stages.byte # cached
# Compilation successful.
